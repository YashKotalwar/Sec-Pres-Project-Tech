package com.example.demo.controller;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.http.ContentDisposition;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.example.demo.repo.MyData;
import com.example.demo.service.TranscriptionService;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.springframework.web.bind.annotation.*;

import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.util.FileCopyUtils;
import java.nio.charset.StandardCharsets;



@RestController
@RequestMapping("/transcription")
public class TranscriptionController {

    @Autowired
    private TranscriptionService transcriptionService;
    
//    @Autowired
//    private ComprehendService comprehendService;

    @PostMapping("/upload")
    public ResponseEntity<?> uploadFile(@RequestParam("file") MultipartFile file) throws IOException {
        transcriptionService.uploadFile(file);
        return ResponseEntity.ok().build();
    }

    @PostMapping("/start")
    public ResponseEntity<?> startTranscriptionJob(@RequestParam("fileName") String fileName,
                                                    @RequestParam("languageCode") String languageCode) {
        transcriptionService.startTranscriptionJob(fileName, languageCode);
        return ResponseEntity.ok().build();
    }

    @GetMapping("/result")
    public ResponseEntity<?> getTranscriptionResult(@RequestParam("jobName") String jobName,
                                                     @RequestParam(value = "download", defaultValue = "false") boolean download) throws IOException {
        String resultUrl = transcriptionService.getTranscriptionResult(jobName);
        if (resultUrl == null) {
            return ResponseEntity.notFound().build();
        }
        if (download) {
            String result = transcriptionService.downloadTranscriptionResult(resultUrl);
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.TEXT_PLAIN);
            headers.setContentDisposition(ContentDisposition.attachment().filename(jobName + ".txt").build());
            return new ResponseEntity<>(result, headers, HttpStatus.OK);
        } else {
            return ResponseEntity.ok(resultUrl);
        }
    }
    
    
//    @GetMapping("/job-summary")
//    public ResponseEntity<String> getTranscriptionJobSummary(@RequestParam("jobName") String jobName) {
//
//        try {
//            String summary = transcriptionService.getTranscriptionJobSummary(jobName);
//            
//            System.out.println(summary + "******************************");
//            
//            
//            return ResponseEntity.ok().body(summary);
//        } catch (Exception e) {
//            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to get transcription job summary: " + e.getMessage());
//        }
//    }
    
    // or
    
    @GetMapping("/job-summary")
    public ResponseEntity<Resource> getTranscriptionJobSummary(@RequestParam("jobName") String jobName) {

        try {
            String summary = transcriptionService.getTranscriptionJobSummary(jobName);

            // create a temporary file with the summary content
            File tempFile = File.createTempFile("transcription-summary-", ".txt");
            BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));
            writer.write(summary);
            writer.close();

            // create a Resource object from the temporary file and return it in the response
            Resource resource = new UrlResource(tempFile.toURI());
            HttpHeaders headers = new HttpHeaders();
            headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=transcription-summary.txt");

            return ResponseEntity.ok()
                    .headers(headers)
                    .contentLength(resource.contentLength())
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .body(resource);

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(null);
        }
    }

//    @GetMapping("/data")
//    public MyData getData() throws IOException {
//        ObjectMapper objectMapper = new ObjectMapper();
//        List<MyData> myDataList = objectMapper.readValue(new File("path/to/json/file.json"), new TypeReference<List<MyData>>() {});
//        MyData myData = myDataList.get(2);
//        return myData;
//    }

    
    
    
    
   
//    private final ComprehendService comprehendService;
//
//    @Autowired
//    public TranscriptionController(TranscriptionService transcriptionService, ComprehendService comprehendService) {
//        this.transcriptionService = transcriptionService;
//        this.comprehendService = comprehendService;
//    }
//    
//    @PostMapping("/notes")
//    public ResponseEntity<List<String>> extractNotes(@RequestBody String transcript) {
//        List<String> notes = comprehendService.extractNotes(transcript);
//        return ResponseEntity.ok(notes);
//    }
    
    
}


